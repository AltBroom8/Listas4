/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Controlador.Lista;
import Modelo.Analista;
import Modelo.Empleado;
import Modelo.Programador;
import Modelo.sueldoException;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.ActionEvent;
import java.sql.SQLOutput;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;


/**
 *
 * @author carlosgowing
 */
public class Main extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public static void main(String[] args) {
        JFrame frame = new JFrame("Ejemplo de Swing");
        Main panel = new Main();
        frame.add(panel);
        frame.setSize(750, 550);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        // TODO code application logic here
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        miScroll = new javax.swing.JScrollPane();
        miJList = new javax.swing.JList<>();
        bInicial = new javax.swing.JButton();
        bAnt = new javax.swing.JButton();
        bSig = new javax.swing.JButton();
        bUltimo = new javax.swing.JButton();
        panelShowDatos = new javax.swing.JPanel();
        NumeroTitle = new javax.swing.JLabel();
        NombreTitle = new javax.swing.JLabel();
        SueldoTitle = new javax.swing.JLabel();
        sueldoMaxTitle = new javax.swing.JLabel();
        fechaAltaTitle = new javax.swing.JLabel();
        numeroValor = new javax.swing.JLabel();
        nombreValor = new javax.swing.JLabel();
        sueldoValor = new javax.swing.JLabel();
        sueldoMaxValor = new javax.swing.JLabel();
        fechaAltaValor = new javax.swing.JLabel();
        tipoTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        datosLabel = new javax.swing.JLabel();
        jPanelInputs = new javax.swing.JPanel();
        numTexfield = new javax.swing.JTextField();
        numeroTitle2 = new javax.swing.JLabel();
        nombreTitle2 = new javax.swing.JLabel();
        nombreTextField = new javax.swing.JTextField();
        sueldoTitle2 = new javax.swing.JLabel();
        sueldoTextField = new javax.swing.JTextField();
        sueldoMaxTitle2 = new javax.swing.JLabel();
        sueldoMaxTextField = new javax.swing.JTextField();
        fAltaTitle2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        programButon = new javax.swing.JRadioButton();
        analistaButon = new javax.swing.JRadioButton();
        plusTitle = new javax.swing.JLabel();
        plusTextField = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        panelBotones = new javax.swing.JPanel();
        bCargar = new javax.swing.JToggleButton();
        bCalcular = new javax.swing.JButton();
        bMasivo = new javax.swing.JButton();
        bModifica = new javax.swing.JButton();
        bEliminar = new javax.swing.JButton();
        bInsertar = new javax.swing.JButton();
        bOrdenar = new javax.swing.JButton();
        bCrear = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();

        miScroll.setViewportView(miJList);

        bInicial.setBackground(new java.awt.Color(153, 255, 153));
        bInicial.setText("⇤");

        bAnt.setBackground(new java.awt.Color(204, 255, 204));
        bAnt.setText("⬅");

        bSig.setBackground(new java.awt.Color(204, 204, 255));
        bSig.setText("⮕");

        bUltimo.setBackground(new java.awt.Color(0, 153, 255));
        bUltimo.setText("⇥");

        panelShowDatos.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 3, true));

        NumeroTitle.setText("Numero:");

        NombreTitle.setText("Nombre:");

        SueldoTitle.setText("Sueldo:");

        sueldoMaxTitle.setText("SueldoMax:");

        fechaAltaTitle.setText("Fecha de Alta:");

        numeroValor.setText("");

        nombreValor.setText("");

        sueldoValor.setText("");

        sueldoMaxValor.setText("");

        fechaAltaValor.setText("");

        tipoTitle.setText("Tipo:");

        jLabel1.setText("");

        javax.swing.GroupLayout panelShowDatosLayout = new javax.swing.GroupLayout(panelShowDatos);
        panelShowDatos.setLayout(panelShowDatosLayout);
        panelShowDatosLayout.setHorizontalGroup(
                panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelShowDatosLayout.createSequentialGroup()
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelShowDatosLayout.createSequentialGroup()
                                                .addComponent(fechaAltaTitle)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fechaAltaValor))
                                        .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(panelShowDatosLayout.createSequentialGroup()
                                                        .addComponent(sueldoMaxTitle)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(sueldoMaxValor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelShowDatosLayout.createSequentialGroup()
                                                        .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(NumeroTitle)
                                                                .addComponent(NombreTitle)
                                                                .addComponent(SueldoTitle))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(numeroValor)
                                                                .addComponent(sueldoValor)
                                                                .addComponent(nombreValor))
                                                        .addGap(22, 22, 22)))
                                        .addGroup(panelShowDatosLayout.createSequentialGroup()
                                                .addComponent(tipoTitle)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel1)))
                                .addGap(0, 68, Short.MAX_VALUE))
        );
        panelShowDatosLayout.setVerticalGroup(
                panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelShowDatosLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(NumeroTitle)
                                        .addComponent(numeroValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(NombreTitle)
                                        .addComponent(nombreValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(SueldoTitle)
                                        .addComponent(sueldoValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sueldoMaxTitle)
                                        .addComponent(sueldoMaxValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fechaAltaTitle)
                                        .addComponent(fechaAltaValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelShowDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tipoTitle)
                                        .addComponent(jLabel1))
                                .addContainerGap())
        );

        datosLabel.setText("Datos");

        jPanelInputs.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 0), 3, true));

        numTexfield.setToolTipText("");

        numeroTitle2.setText("Numero:");

        nombreTitle2.setText("Nombre:");

        sueldoTitle2.setText("Sueldo:");

        sueldoMaxTitle2.setText("SueldoMax:");

        fAltaTitle2.setText("Fecha de Alta:");

        programButon.setText("Programador");

        analistaButon.setText("Analista");

        plusTitle.setText("Plus/Extra:");

        javax.swing.GroupLayout jPanelInputsLayout = new javax.swing.GroupLayout(jPanelInputs);
        jPanelInputs.setLayout(jPanelInputsLayout);
        jPanelInputsLayout.setHorizontalGroup(
                jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(numeroTitle2)
                                                        .addComponent(nombreTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(sueldoTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(sueldoMaxTitle2)
                                                        .addComponent(fAltaTitle2))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(nombreTextField)
                                                        .addComponent(numTexfield)
                                                        .addComponent(sueldoTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(sueldoMaxTextField)
                                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                                                .addContainerGap()
                                                                .addComponent(plusTitle)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(plusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                                                .addComponent(programButon)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(analistaButon, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(0, 9, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelInputsLayout.setVerticalGroup(
                jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelInputsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numTexfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numeroTitle2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(nombreTitle2)
                                        .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sueldoTitle2)
                                        .addComponent(sueldoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(sueldoMaxTitle2)
                                        .addComponent(sueldoMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(fAltaTitle2)
                                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(programButon)
                                        .addComponent(analistaButon))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(plusTitle)
                                        .addComponent(plusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(17, Short.MAX_VALUE))
        );

        bCargar.setText("Cargar");

        bCalcular.setText("Calcular");

        bMasivo.setText("Masivo");

        bModifica.setText("Modifica");

        bEliminar.setText("Eliminar");

        bInsertar.setText("Insertar");

        bOrdenar.setText("Ordenar");

        bCrear.setText("Crear");

        bGuardar.setText("Guardar");

        javax.swing.GroupLayout panelBotonesLayout = new javax.swing.GroupLayout(panelBotones);
        panelBotones.setLayout(panelBotonesLayout);
        panelBotonesLayout.setHorizontalGroup(
                panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelBotonesLayout.createSequentialGroup()
                                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(bCargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bMasivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bOrdenar, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                                .addGap(35, 35, 35)
                                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(bInsertar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bModifica, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                        .addComponent(bCrear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bGuardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(panelBotonesLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        panelBotonesLayout.setVerticalGroup(
                panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelBotonesLayout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(bCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(bGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(bMasivo, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                                        .addComponent(bModifica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(bEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                                        .addComponent(bInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(panelBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(bOrdenar, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                                        .addComponent(bCrear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(bCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(miScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addComponent(bInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(bAnt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(bSig, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(bUltimo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(panelShowDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(datosLabel)
                                        .addComponent(jPanelInputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(miScroll)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(bInicial)
                                                                        .addComponent(bAnt)
                                                                        .addComponent(bSig)
                                                                        .addComponent(bUltimo)))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(datosLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(panelShowDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(26, 26, 26)
                                                                .addComponent(jPanelInputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        miJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        Lista milistado = new Lista();
        miJList.setModel(listaGenerica);
        programButon.setEnabled(false);
        analistaButon.setEnabled(false);
        plusTextField.setEnabled(false);
        jComboBox1.setEnabled(false);
        bCrear.setEnabled(true);
        bCargar.setEnabled(true);
        bGuardar.setEnabled(false);
        bMasivo.setEnabled(true);
        bModifica.setEnabled(false);
        bEliminar.setEnabled(false);
        bInsertar.setEnabled(false);
        bOrdenar.setEnabled(false);
        nombreTextField.setEditable(true);
        numTexfield.setEditable(true);
        sueldoMaxTextField.setEditable(true);
        sueldoTextField.setEditable(true);
        plusTextField.setEnabled(false);
        nombreTextField.setEnabled(false);
        numTexfield.setEnabled(false);
        sueldoMaxTextField.setEnabled(false);
        sueldoTextField.setEnabled(false);
        jDateChooser1.setEnabled(false);
        JTextField dateChooserTextField = ((JTextField) jDateChooser1.getDateEditor().getUiComponent());
        dateChooserTextField.setEditable(false);
        bCalcular.setEnabled(false);

        miJList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int index = miJList.getSelectedIndex();
                milistado.cambiaPos(index);
                Empleado empl = (Empleado) milistado.getActual().getInfo();
                if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                    Programador p = (Programador) milistado.getActual().getInfo();
                    if(p.cumpleMes()){
                        bCalcular.setEnabled(true);
                    }
                }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                    Analista a = (Analista) milistado.getActual().getInfo();
                    if(a.cumpleAnio()){
                        bCalcular.setEnabled(true);
                    }
                }
                Empleado emp = (Empleado) milistado.getActual().getInfo();
                numeroValor.setText(String.valueOf(emp.getNumero()));
                nombreValor.setText(emp.getNombre());
                sueldoValor.setText(String.valueOf(emp.getSueldo())+" €");
                sueldoMaxValor.setText(String.valueOf(emp.getSueldoMax())+" €");
                fechaAltaValor.setText(Lista.convierteFecha(emp.getfAlta()));
                if (milistado.getActual().getInfo() instanceof Programador) {
                    jLabel1.setText("Programador");
                }else{
                    jLabel1.setText("Analista");
                }

            }
        });
        bCalcular.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(milistado.getActual().getInfo() instanceof Programador){
                    Programador p = (Programador) milistado.getActual().getInfo();
                    p.setSueldo(p.getSueldo()+p.getExtra());
                    p.setCalcula(true);
                    milistado.getActual().setInfo(p);
                    sueldoValor.setText(String.valueOf(p.getSueldo())+" €");

                }else{
                    Analista a = (Analista) milistado.getActual().getInfo();
                    a.setSueldo(a.getSueldo()+a.getPlus());
                    a.setCalcula(true);
                    milistado.getActual().setInfo(a);
                    sueldoValor.setText(String.valueOf(a.getSueldo())+" €");
                }
                bCalcular.setEnabled(false);

            }
        });
        bInicial.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(!milistado.esVacia()){
                    milistado.setActual(milistado.getInicial());
                    miJList.setSelectedIndex(0);
                    Empleado temp = (Empleado) milistado.getActual().getInfo();
                    numeroValor.setText(String.valueOf(temp.getNumero()));
                    nombreValor.setText(temp.getNombre());
                    sueldoValor.setText(String.valueOf(temp.getSueldo())+" €");
                    sueldoMaxValor.setText(String.valueOf(temp.getSueldoMax())+" €");
                    fechaAltaValor.setText(Lista.convierteFecha(temp.getfAlta()));
                    if (milistado.getActual().getInfo() instanceof Programador) {
                        jLabel1.setText("Programador");
                    }else{
                        jLabel1.setText("Analista");
                    }
                    Empleado empl = (Empleado) milistado.getActual().getInfo();
                    if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                        Programador p = (Programador) milistado.getActual().getInfo();
                        if(p.cumpleMes()){
                            bCalcular.setEnabled(true);
                        }
                    }else if(milistado.getActual().getInfo() instanceof Analista &&empl.getCalcula()==false) {
                        Analista a = (Analista) milistado.getActual().getInfo();
                        if(a.cumpleAnio()){
                            bCalcular.setEnabled(true);
                        }
                    }
                }


            }
        });
        bUltimo.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(!milistado.esVacia()){
                    milistado.setActual(milistado.getUltimo());
                    miJList.setSelectedIndex(miJList.getModel().getSize()-1);
                    Empleado temp = (Empleado) milistado.getActual().getInfo();
                    numeroValor.setText(String.valueOf(temp.getNumero()));
                    nombreValor.setText(temp.getNombre());
                    sueldoValor.setText(String.valueOf(temp.getSueldo())+" €");
                    sueldoMaxValor.setText(String.valueOf(temp.getSueldoMax())+" €");
                    fechaAltaValor.setText(Lista.convierteFecha(temp.getfAlta()));
                    if (milistado.getActual().getInfo() instanceof Programador) {
                        jLabel1.setText("Programador");
                    }else{
                        jLabel1.setText("Analista");
                    }
                    Empleado empl = (Empleado) milistado.getActual().getInfo();
                    if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                        Programador p = (Programador) milistado.getActual().getInfo();
                        if(p.cumpleMes()){
                            bCalcular.setEnabled(true);
                        }
                    }else if(milistado.getActual().getInfo() instanceof Analista &&empl.getCalcula()==false) {
                        Analista a = (Analista) milistado.getActual().getInfo();
                        if(a.cumpleAnio()){
                            bCalcular.setEnabled(true);
                        }
                    }

                }
            }
        });
        bSig.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(!milistado.esVacia()&& milistado.getActual().tieneSig()){
                    milistado.setActual(milistado.getActual().getSig());
                    miJList.setSelectedIndex(miJList.getSelectedIndex()+1);
                    Empleado temp = (Empleado) milistado.getActual().getInfo();
                    numeroValor.setText(String.valueOf(temp.getNumero()));
                    nombreValor.setText(temp.getNombre());
                    sueldoValor.setText(String.valueOf(temp.getSueldo())+" €");
                    sueldoMaxValor.setText(String.valueOf(temp.getSueldoMax())+" €");
                    fechaAltaValor.setText(Lista.convierteFecha(temp.getfAlta()));
                    if (milistado.getActual().getInfo() instanceof Programador) {
                        jLabel1.setText("Programador");
                    }else{
                        jLabel1.setText("Analista");
                    }
                    Empleado empl = (Empleado) milistado.getActual().getInfo();
                    if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                        Programador p = (Programador) milistado.getActual().getInfo();
                        if(p.cumpleMes()){
                            bCalcular.setEnabled(true);
                        }
                    }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                        Analista a = (Analista) milistado.getActual().getInfo();
                        if(a.cumpleAnio()){
                            bCalcular.setEnabled(true);
                        }
                    }

                }
            }

        });
        bAnt.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(!milistado.esVacia()&& milistado.getActual().tieneAnt()){
                    milistado.setActual(milistado.getActual().getAnt());
                    miJList.setSelectedIndex(miJList.getSelectedIndex()-1);
                    Empleado temp = (Empleado) milistado.getActual().getInfo();
                    numeroValor.setText(String.valueOf(temp.getNumero()));
                    nombreValor.setText(temp.getNombre());
                    sueldoValor.setText(String.valueOf(temp.getSueldo())+" €");
                    sueldoMaxValor.setText(String.valueOf(temp.getSueldoMax())+" €");
                    fechaAltaValor.setText(Lista.convierteFecha(temp.getfAlta()));
                    if (milistado.getActual().getInfo() instanceof Programador) {
                        jLabel1.setText("Programador");
                    }else{
                        jLabel1.setText("Analista");
                    }
                    Empleado empl = (Empleado) milistado.getActual().getInfo();
                    if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                        Programador p = (Programador) milistado.getActual().getInfo();
                        if(p.cumpleMes()){
                            bCalcular.setEnabled(true);
                        }
                    }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                        Analista a = (Analista) milistado.getActual().getInfo();
                        if(a.cumpleAnio()){
                            bCalcular.setEnabled(true);
                        }
                    }

                }
            }
        });
        bCrear.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(bInsertar.isEnabled() || modificacion){
                    bCrear.setText("Crear");
                    bMasivo.setEnabled(true);
                    bCargar.setEnabled(true);
                    Empleado empl = (Empleado) milistado.getActual().getInfo();
                    if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                        Programador p = (Programador) milistado.getActual().getInfo();
                        System.out.println(p.getfAlta());
                        if(p.cumpleMes()){
                            bCalcular.setEnabled(true);
                        }
                    }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                        Analista a = (Analista) milistado.getActual().getInfo();
                        if(a.cumpleAnio()){
                            bCalcular.setEnabled(true);
                        }
                    }

                    bInsertar.setEnabled(false);
                    nombreTextField.setEnabled(false);
                    numTexfield.setEnabled(false);
                    sueldoMaxTextField.setEnabled(false);
                    sueldoTextField.setEnabled(false);
                    jDateChooser1.setEnabled(false);
                    nombreTextField.setText("");
                    numTexfield.setText("");
                    sueldoTextField.setText("");
                    sueldoMaxTextField.setText("");
                    dateChooserTextField.setText("");
                    plusTextField.setText("");
                    if(!milistado.esVacia()){
                        bGuardar.setEnabled(true);
                        bModifica.setEnabled(true);
                        bEliminar.setEnabled(true);
                        bOrdenar.setEnabled(true);
                    }
                    programButon.setSelected(false);
                    analistaButon.setSelected(false);
                    programButon.setEnabled(false);
                    analistaButon.setEnabled(false);
                    plusTextField.setEnabled(false);
                    jComboBox1.removeAllItems();
                    jComboBox1.setEnabled(false);
                    if(modificacion){
                        modificacion = false;
                    }

                }else{

                    bCrear.setText("Salir");
                    bGuardar.setEnabled(false);
                    bInsertar.setEnabled(true);
                    bMasivo.setEnabled(false);
                    bCargar.setEnabled(false);
                    bModifica.setEnabled(false);
                    bEliminar.setEnabled(false);
                    bOrdenar.setEnabled(false);

                    nombreTextField.setEnabled(true);
                    numTexfield.setEnabled(true);
                    sueldoMaxTextField.setEnabled(true);
                    sueldoTextField.setEnabled(true);
                    plusTextField.setEnabled(true);
                    jDateChooser1.setEnabled(true);
                    programButon.setEnabled(true);
                    analistaButon.setEnabled(true);

                    jComboBox1.setEnabled(true);

                }

            }
        });
        programButon.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                analistaButon.setSelected(false);
                jComboBox1.removeAllItems();
                if(programButon.isSelected()){
                    jComboBox1.addItem("Tengo coche");
                    jComboBox1.addItem("No tengo coche");
                }

            }

        });
        analistaButon.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jComboBox1.removeAllItems();
                if (analistaButon.isSelected()){
                    jComboBox1.addItem("Soy jefe");
                    jComboBox1.addItem("No soy jefe");
                }

                programButon.setSelected(false);
            }
        });
        bInsertar.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    double num = Double.parseDouble(plusTextField.getText());
                }catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "El campo plus debe ser un numero", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try{
                    if(numTexfield.getText().isEmpty() || nombreTextField.getText().isEmpty()|| sueldoTextField.getText().isEmpty() || sueldoMaxTextField.getText().isEmpty() || jDateChooser1.getDate() == null|| plusTextField.getText().isEmpty()){
                        JOptionPane.showMessageDialog(null, "Ningun campo puede estar vacio", "Error", JOptionPane.ERROR_MESSAGE);
                    } else if (!programButon.isSelected() && !analistaButon.isSelected()) {
                        JOptionPane.showMessageDialog(null, "Debe seleccionar un puesto", "Error", JOptionPane.ERROR_MESSAGE);
                    } else if (milistado.numRepe(Integer.parseInt(numTexfield.getText()))) {
                        JOptionPane.showMessageDialog(null, "El número de empleado debe ser único", "Error", JOptionPane.ERROR_MESSAGE);
                    } else if(!nombreTextField.getText().matches("^[A-Za-z\\\\s]+$")){
                        JOptionPane.showMessageDialog(null, "El nombre debe tener solo letras y espacios", "Error", JOptionPane.ERROR_MESSAGE);
                    }else if(Integer.parseInt(numTexfield.getText()) < 1000 || Integer.parseInt(numTexfield.getText()) > 2000){
                        JOptionPane.showMessageDialog(null, "El valor debe estar entre 1000 y 2000", "Error", JOptionPane.ERROR_MESSAGE);
                    }else if(Double.parseDouble(sueldoTextField.getText()) > Double.parseDouble(sueldoMaxTextField.getText()) ){
                        throw new sueldoException();
                    } else if (Double.parseDouble(plusTextField.getText()) < 0 || Double.parseDouble(plusTextField.getText()) > Double.parseDouble(sueldoTextField.getText())) {
                        JOptionPane.showMessageDialog(null, "El valor de plus o extra debe estar entre 0 y el sueldo", "Error", JOptionPane.ERROR_MESSAGE);
                    } else if (jComboBox1.getSelectedIndex() == -1) {
                        JOptionPane.showMessageDialog(null, "Debe elegir una opción de la lista", "Error", JOptionPane.ERROR_MESSAGE);

                    } else{
                        System.out.println(jDateChooser1.getDate());
                        Date fecha = jDateChooser1.getDate();
                        boolean programador = (programButon.isSelected())? true : false;
                        boolean opcion = (jComboBox1.getSelectedIndex() == 0)? true : false;
                        if (programador){
                            Programador emp = new Programador(Integer.parseInt(numTexfield.getText()), nombreTextField.getText(), Double.parseDouble(sueldoTextField.getText()), Double.parseDouble(sueldoMaxTextField.getText()), jDateChooser1.getDate(), Double.parseDouble(plusTextField.getText()), opcion);
                            milistado.insertar(emp);
                            listaGenerica.add(listaGenerica.size(), "Programador: "+nombreTextField.getText());

                        }else {
                            Analista emp = new Analista(Integer.parseInt(numTexfield.getText()), nombreTextField.getText(), Double.parseDouble(sueldoTextField.getText()), Double.parseDouble(sueldoMaxTextField.getText()), jDateChooser1.getDate(), Double.parseDouble(plusTextField.getText()), opcion);
                            milistado.insertar(emp);
                            listaGenerica.add(listaGenerica.size(),"Analista: "+nombreTextField.getText());
                        }


                        nombreTextField.setEnabled(false);
                        numTexfield.setEnabled(false);
                        sueldoMaxTextField.setEnabled(false);
                        sueldoTextField.setEnabled(false);
                        jDateChooser1.setEnabled(false);
                        dateChooserTextField.setEditable(false);
                        programButon.setSelected(false);
                        analistaButon.setSelected(false);
                        programButon.setEnabled(false);
                        analistaButon.setEnabled(false);
                        plusTextField.setEnabled(false);
                        jComboBox1.removeAllItems();
                        jComboBox1.setEnabled(false);
                        bInsertar.setEnabled(false);
                        bCrear.setText("Crear");
                        bCargar.setEnabled(true);
                        bMasivo.setEnabled(true);
                        bEliminar.setEnabled(true);
                        bGuardar.setEnabled(true);
                        bModifica.setEnabled(true);
                        bOrdenar.setEnabled(true);
                        bInicial.setEnabled(true);
                        Empleado temp = (Empleado) milistado.getUltimo().getInfo();
                        temp.setfAlta(fecha);
                        milistado.getUltimo().setInfo(temp);
                        if(milistado.getContador()==1){
                            miJList.setSelectedIndex(0);
                            System.out.println(temp.getfAlta());
                            System.out.println(fecha);
                            numeroValor.setText(String.valueOf(temp.getNumero()));
                            nombreValor.setText(temp.getNombre());
                            sueldoValor.setText(String.valueOf(temp.getSueldo())+" €");
                            sueldoMaxValor.setText(String.valueOf(temp.getSueldoMax())+" €");
                            fechaAltaValor.setText(Lista.convierteFecha(temp.getfAlta()));
                            if (milistado.getUltimo().getInfo() instanceof Programador) {
                                jLabel1.setText("Programador");
                            }else{
                                jLabel1.setText("Analista");
                            }
                        }
                        nombreTextField.setText("");
                        numTexfield.setText("");
                        sueldoTextField.setText("");
                        sueldoMaxTextField.setText("");
                        dateChooserTextField.setText("");
                        plusTextField.setText("");
                        Empleado empl = (Empleado) milistado.getActual().getInfo();
                        if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                            Programador p = (Programador) milistado.getActual().getInfo();
                            System.out.println("cumple mes: "+p.cumpleMes());
                            if(p.cumpleMes()){
                                System.out.println("hola");
                                bCalcular.setEnabled(true);
                            }
                        }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                            Analista a = (Analista) milistado.getActual().getInfo();
                            if(a.cumpleAnio()){
                                System.out.println("adios");
                                bCalcular.setEnabled(true);
                            }
                        }
                    }

                }catch(NumberFormatException e1){
                    JOptionPane.showMessageDialog(null, "Compruebe los campos numericos", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (sueldoException ex) {
                }

            }
        });
        bModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if(!modificacion){
                    modificacion = true;
                    bGuardar.setEnabled(false);
                    bCargar.setEnabled(false);
                    bMasivo.setEnabled(false);
                    bEliminar.setEnabled(false);
                    bInsertar.setEnabled(false);
                    bOrdenar.setEnabled(false);
                    bCrear.setText("Salir");
                    bCalcular.setEnabled(false);
                    nombreTextField.setEnabled(true);
                    sueldoTextField.setEnabled(true);
                    sueldoMaxTextField.setEnabled(true);
                    jDateChooser1.setEnabled(true);
                    programButon.setEnabled(true);
                    analistaButon.setEnabled(true);
                    plusTextField.setEnabled(true);
                    jComboBox1.setEnabled(true);
                    if (milistado.getActual().getInfo() instanceof Programador) {
                        Programador prog = (Programador) milistado.getActual().getInfo();
                        numTexfield.setText(String.valueOf(prog.getNumero()));
                        nombreTextField.setText(prog.getNombre());
                        sueldoTextField.setText(String.valueOf(prog.getSueldo()));
                        sueldoMaxTextField.setText(String.valueOf(prog.getSueldoMax()));
                        plusTextField.setText(String.valueOf(prog.getExtra()));
                        dateChooserTextField.setText(Lista.convierteFecha(prog.getfAlta()));
                        jDateChooser1.setDate(prog.getfAlta());
                        programButon.setSelected(true);
                        jComboBox1.removeAllItems();
                        jComboBox1.addItem("Tengo coche");
                        jComboBox1.addItem("No tengo coche");
                        if(prog.getCoche()){
                            jComboBox1.setSelectedIndex(0);
                        }else{
                            jComboBox1.setSelectedIndex(1);
                        }
                        plusTextField.setText(String.valueOf(prog.getExtra()));
                    }else if(milistado.getActual().getInfo() instanceof Analista){
                        Analista anal =  (Analista) milistado.getActual().getInfo();
                        numTexfield.setText(String.valueOf(anal.getNumero()));
                        nombreTextField.setText(anal.getNombre());
                        sueldoTextField.setText(String.valueOf(anal.getSueldo()));
                        sueldoMaxTextField.setText(String.valueOf(anal.getSueldoMax()));
                        plusTextField.setText(String.valueOf(anal.getPlus()));
                        dateChooserTextField.setText(Lista.convierteFecha(anal.getfAlta()));
                        analistaButon.setSelected(true);
                        jDateChooser1.setDate(anal.getfAlta());
                        jComboBox1.removeAllItems();
                        jComboBox1.addItem("Soy jefe");
                        jComboBox1.addItem("No soy jefe");
                        if(anal.isJefe()){
                            jComboBox1.setSelectedIndex(0);
                        }else{
                            jComboBox1.setSelectedIndex(1);
                        }
                        plusTextField.setText(String.valueOf(anal.getPlus()));
                    }

                }else{
                    try{
                        double num = Double.parseDouble(plusTextField.getText());
                    }catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "El campo plus debe ser un numero", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    try{
                        if(numTexfield.getText().isEmpty() || nombreTextField.getText().isEmpty()|| sueldoTextField.getText().isEmpty() || sueldoMaxTextField.getText().isEmpty() || jDateChooser1.getDate() == null|| plusTextField.getText().isEmpty()){
                            JOptionPane.showMessageDialog(null, "Ningun campo puede estar vacio", "Error", JOptionPane.ERROR_MESSAGE);
                        } else if (!programButon.isSelected() && !analistaButon.isSelected()) {
                            JOptionPane.showMessageDialog(null, "Debe seleccionar un puesto", "Error", JOptionPane.ERROR_MESSAGE);
                        } else if(!nombreTextField.getText().matches("^[A-Za-z\\\\s]+$")){
                            JOptionPane.showMessageDialog(null, "El nombre debe tener solo letras y espacios", "Error", JOptionPane.ERROR_MESSAGE);
                        }else if(Integer.parseInt(numTexfield.getText()) < 1000 || Integer.parseInt(numTexfield.getText()) > 2000){
                            JOptionPane.showMessageDialog(null, "El valor debe estar entre 1000 y 2000", "Error", JOptionPane.ERROR_MESSAGE);
                        }else if(Double.parseDouble(sueldoTextField.getText()) > Double.parseDouble(sueldoMaxTextField.getText()) ){
                            throw new sueldoException();
                        } else if (Double.parseDouble(plusTextField.getText()) < 0 || Double.parseDouble(plusTextField.getText()) > Double.parseDouble(sueldoTextField.getText())) {
                            JOptionPane.showMessageDialog(null, "El valor de plus o extra debe estar entre 0 y el sueldo", "Error", JOptionPane.ERROR_MESSAGE);
                        } else if (jComboBox1.getSelectedIndex() == -1) {
                            JOptionPane.showMessageDialog(null, "Debe elegir una opción de la lista", "Error", JOptionPane.ERROR_MESSAGE);

                        } else{
                            boolean programador = (programButon.isSelected())? true : false;
                            boolean opcion = (jComboBox1.getSelectedIndex() == 0)? true : false;
                            Date fecha = jDateChooser1.getDate();
                            if (programador){
                                Programador emp = new Programador(Integer.parseInt(numTexfield.getText()), nombreTextField.getText(), Double.parseDouble(sueldoTextField.getText()), Double.parseDouble(sueldoMaxTextField.getText()), fecha, Double.parseDouble(plusTextField.getText()), opcion);
                                if(milistado.modifica(emp)==false)return;
                                int index = miJList.getSelectedIndex();
                                listaGenerica.remove(index);
                                listaGenerica.add(index, "Programador: "+nombreTextField.getText());

                            }else {
                                Analista emp = new Analista(Integer.parseInt(numTexfield.getText()), nombreTextField.getText(), Double.parseDouble(sueldoTextField.getText()), Double.parseDouble(sueldoMaxTextField.getText()), fecha, Double.parseDouble(plusTextField.getText()), opcion);
                                if(milistado.modifica(emp)==false)return;
                                int index = miJList.getSelectedIndex();
                                listaGenerica.remove(index);
                                listaGenerica.add(index, "Analista: "+nombreTextField.getText());
                            }
                            if(milistado.getContador()==1){
                                miJList.setSelectedIndex(0);
                            }

                            nombreTextField.setEnabled(false);
                            numTexfield.setEnabled(false);
                            sueldoMaxTextField.setEnabled(false);
                            sueldoTextField.setEnabled(false);
                            jDateChooser1.setEnabled(false);
                            dateChooserTextField.setEditable(false);
                            programButon.setSelected(false);
                            analistaButon.setSelected(false);
                            programButon.setEnabled(false);
                            analistaButon.setEnabled(false);
                            plusTextField.setEnabled(false);
                            jComboBox1.removeAllItems();
                            jComboBox1.setEnabled(false);
                            bInsertar.setEnabled(false);
                            bCrear.setText("Crear");
                            bCargar.setEnabled(true);
                            bMasivo.setEnabled(true);
                            bEliminar.setEnabled(true);
                            bGuardar.setEnabled(true);
                            bModifica.setEnabled(true);
                            bOrdenar.setEnabled(true);
                            bInicial.setEnabled(true);
                            Empleado temp = (Empleado) milistado.getActual().getInfo();
                            Empleado empl = (Empleado) milistado.getActual().getInfo();
                            if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                                Programador p = (Programador) milistado.getActual().getInfo();
                                if(p.cumpleMes()){
                                    bCalcular.setEnabled(true);
                                }
                            }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                                Analista a = (Analista) milistado.getActual().getInfo();
                                if(a.cumpleAnio()){
                                    bCalcular.setEnabled(true);
                                }
                            }
                            temp.setfAlta(fecha);
                            milistado.getActual().setInfo(temp);
                            System.out.println(temp.getfAlta());
                            numeroValor.setText(String.valueOf(temp.getNumero()));
                            nombreValor.setText(temp.getNombre());
                            sueldoValor.setText(String.valueOf(temp.getSueldo())+" €");
                            sueldoMaxValor.setText(String.valueOf(temp.getSueldoMax())+" €");
                            fechaAltaValor.setText(Lista.convierteFecha(temp.getfAlta()));
                            if (milistado.getActual().getInfo() instanceof Programador) {
                                jLabel1.setText("Programador");
                            }else{
                                jLabel1.setText("Analista");
                            }
                            modificacion = false;
                            nombreTextField.setText("");
                            numTexfield.setText("");
                            sueldoTextField.setText("");
                            sueldoMaxTextField.setText("");
                            dateChooserTextField.setText("");
                            plusTextField.setText("");
                        }

                    }catch(NumberFormatException e1){
                        JOptionPane.showMessageDialog(null, "Compruebe los campos numericos", "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (sueldoException ex) {
                    }
                }
            }
        });
        bEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                System.out.println("ANTES DE ELIMINAR CONTADOR="+milistado.getContador());
                System.out.println("------------------------------------------------");
                milistado.imprimeLista();
                if(miJList.getSelectedIndex() == -1){
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un empleado para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(milistado.getContador()==0){
                    JOptionPane.showMessageDialog(null, "No hay empleados para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (milistado.getContador() == 1) {
                    miJList.setSelectedIndex(-1);
                    listaGenerica.removeAllElements();
                    milistado.elimina();
                    JOptionPane.showMessageDialog(null, "El ultimo empleado ha sido eliminado", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    numeroValor.setText("");
                    nombreValor.setText("");
                    sueldoValor.setText("");
                    sueldoMaxValor.setText("");
                    fechaAltaValor.setText("");
                    jLabel1.setText("");
                    bGuardar.setEnabled(false);
                }else{
                    milistado.elimina();
                    listaGenerica.remove(miJList.getSelectedIndex());
                    if(milistado.getActual().tieneSig()) {
                        miJList.setSelectedIndex(miJList.getSelectedIndex() + 1);
                    }else {
                        miJList.setSelectedIndex(miJList.getSelectedIndex() - 1);
                    }

                    if(milistado.getActual().getInfo() instanceof Programador) {
                        Programador emp = (Programador) milistado.getActual().getInfo();
                        numeroValor.setText(String.valueOf(emp.getNumero()));
                        nombreValor.setText(emp.getNombre());
                        sueldoValor.setText(String.valueOf(emp.getSueldo())+" €");
                        sueldoMaxValor.setText(String.valueOf(emp.getSueldoMax())+" €");
                        fechaAltaValor.setText(Lista.convierteFecha(emp.getfAlta()));
                        jLabel1.setText("Programador");
                    }else{
                        Analista emp = (Analista) milistado.getActual().getInfo();
                        numeroValor.setText(String.valueOf(emp.getNumero()));
                        nombreValor.setText(emp.getNombre());
                        sueldoValor.setText(String.valueOf(emp.getSueldo())+" €");
                        sueldoMaxValor.setText(String.valueOf(emp.getSueldoMax())+" €");
                        fechaAltaValor.setText(Lista.convierteFecha(emp.getfAlta()));
                        jLabel1.setText("Analista");
                    }
                    Empleado empl = (Empleado) milistado.getActual().getInfo();
                    if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                        Programador p = (Programador) milistado.getActual().getInfo();
                        if(p.cumpleMes()){
                            bCalcular.setEnabled(true);
                        }
                    }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                        Analista a = (Analista) milistado.getActual().getInfo();
                        if(a.cumpleAnio()){
                            bCalcular.setEnabled(true);
                        }
                    }

                }
                System.out.println("DESPUES DE ELIMINAR");
                System.out.println("------------------------------------------------");
                milistado.imprimeLista();
            }
        });
        bMasivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                for(int i =1;i<=100;i++){
                    int num = 2001;
                    while(milistado.existe(num)){
                        num = milistado.extraeNum1(2001,1000000);
                    }
                    String nombre = milistado.extraeNombre();
                    double sueldo = milistado.extraeSueldo();
                    double sueldoMax = milistado.extraeSueldo();
                    while(sueldoMax<sueldo)sueldoMax = milistado.extraeSueldo();
                    Date fecha = milistado.extraeFecha();
                    double plus  = milistado.extraePlus(sueldo);
                    Random rand = new Random();
                    boolean esProgramador = rand.nextBoolean();
                    boolean opcion = rand.nextBoolean();
                    if(esProgramador){
                        Programador p = new Programador(num, nombre, sueldo, sueldoMax, fecha, plus, opcion);
                        milistado.insertar(p);
                        listaGenerica.add(listaGenerica.size(), "Programador: "+nombre);
                        p.setfAlta(fecha);
                        milistado.getUltimo().setInfo(p);
                    }else {
                        Analista a = new Analista(num, nombre, sueldo, sueldoMax, fecha, plus, opcion);
                        milistado.insertar(a);
                        a.setfAlta(fecha);
                        listaGenerica.add(listaGenerica.size(), "Analista: "+nombre);
                        milistado.getUltimo().setInfo(a);
                    }
                    System.out.println(i+" "+nombre);
                }
                for (int i=1;i<=20;i++ ){
                    int num = 1;
                    while(milistado.existe(num)){
                        num = milistado.extraeNum1(1,2000);
                    }
                    String nombre = milistado.extraeNombre();
                    double sueldo = milistado.extraeSueldo();
                    double sueldoMax = milistado.extraeSueldo();
                    while(sueldoMax<sueldo)sueldoMax = milistado.extraeSueldo();
                    Date fecha = milistado.extraeFecha();
                    double plus  = milistado.extraePlus(sueldo);
                    Random rand = new Random();
                    boolean esProgramador = rand.nextBoolean();
                    boolean opcion = rand.nextBoolean();
                    if(esProgramador){
                        Programador p = new Programador(num, nombre, sueldo, sueldoMax, fecha, plus, opcion);
                        milistado.insertar(p);
                        listaGenerica.add(listaGenerica.size(), "Programador: "+nombre);
                        p.setfAlta(fecha);
                        milistado.getUltimo().setInfo(p);
                    }else {
                        Analista a = new Analista(num, nombre, sueldo, sueldoMax, fecha, plus, opcion);
                        milistado.insertar(a);
                        a.setfAlta(fecha);
                        listaGenerica.add(listaGenerica.size(), "Analista: "+nombre);
                        milistado.getUltimo().setInfo(a);
                    }
                    System.out.println(i+" "+nombre);
                }
                Empleado empl = (Empleado) milistado.getActual().getInfo();
                if(milistado.getActual().getInfo() instanceof Programador && empl.getCalcula()==false) {
                    Programador p = (Programador) milistado.getActual().getInfo();
                    if(p.cumpleMes()){
                        bCalcular.setEnabled(true);
                    }
                }else if(milistado.getActual().getInfo() instanceof Analista && empl.getCalcula()==false) {
                    Analista a = (Analista) milistado.getActual().getInfo();
                    if(a.cumpleAnio()){
                        bCalcular.setEnabled(true);
                    }
                }
                bOrdenar.setEnabled(true);
                bEliminar.setEnabled(true);
                bModifica.setEnabled(true);
                bGuardar.setEnabled(true);
                System.out.println(milistado.getInicial());

            }
        });
        bOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    System.out.println("--------------------------------");
                    milistado.imprimeLista();
                    milistado.sort(0, (milistado.getUltimo().getIndice()));
                    System.out.println("Bandera");
                    milistado.imprimeLista();
                    listaGenerica.clear();
                    listaGenerica.removeAllElements();
                    miarraylist.clear();
                    Lista.Nodo a = milistado.getInicial();
                    while (a != null) {
                        Empleado emp = (Empleado) a.getInfo();
                        if (a.getInfo() instanceof Programador) {
                            listaGenerica.add(listaGenerica.size(), "Programador: " + emp.getNombre());
                            miarraylist.add("Programador: " + emp.getNombre());
                        } else {
                            listaGenerica.add(listaGenerica.size(), "Analista: " + emp.getNombre());
                            miarraylist.add("Analista: " + emp.getNombre());
                        }
                        a = a.getSig();
                    }
                    miJList.setModel(listaGenerica);
                }catch(NullPointerException e){
                    JOptionPane.showMessageDialog(null, "No hay elementos para ordenar", "Error", JOptionPane.ERROR_MESSAGE);
                }

            }

        });

        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                milistado.exportar();
                bGuardar.setEnabled(true);
            }
        });
        bCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                if(milistado.importar()) {

                    listaGenerica.clear();
                    miarraylist.clear();
                    milistado.importar();
                    Lista.Nodo aux = milistado.getInicial();
                    while (aux != null) {
                        if (aux.getInfo() instanceof Programador) {
                            Programador emp = (Programador) aux.getInfo();
                            listaGenerica.add(listaGenerica.size(), "Programador: " + emp.getNombre());
                            miarraylist.add("Programador: " + emp.getNombre());
                        } else {
                            Analista emp = (Analista) aux.getInfo();
                            listaGenerica.add(listaGenerica.size(), "Analista: " + emp.getNombre());
                            miarraylist.add("Analista: " + emp.getNombre());
                        }
                        aux = aux.getSig();
                    }
                    miJList.setModel(listaGenerica);
                    bGuardar.setEnabled(true);
                    bModifica.setEnabled(true);
                    bEliminar.setEnabled(true);
                    bOrdenar.setEnabled(true);
                    bCargar.setEnabled(false);
                }else {
                    JOptionPane.showMessageDialog(null, "No se pudo cargar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });



    }// </editor-fold>

    // Variables declaration - do not modify
    private DefaultListModel<String> listaGenerica = new DefaultListModel<>();
    private ArrayList<String> miarraylist = new ArrayList<String>();
    private boolean modificacion = false;
    private javax.swing.JLabel NombreTitle;
    private javax.swing.JLabel NumeroTitle;
    private javax.swing.JLabel SueldoTitle;
    private javax.swing.JRadioButton analistaButon;
    private javax.swing.JButton bAnt;
    private javax.swing.JButton bCalcular;
    private javax.swing.JToggleButton bCargar;
    private javax.swing.JButton bCrear;
    private javax.swing.JButton bEliminar;
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bInicial;
    private javax.swing.JButton bInsertar;
    private javax.swing.JButton bMasivo;
    private javax.swing.JButton bModifica;
    private javax.swing.JButton bOrdenar;
    private javax.swing.JButton bSig;
    private javax.swing.JButton bUltimo;
    private javax.swing.JLabel datosLabel;
    private javax.swing.JLabel fAltaTitle2;
    private javax.swing.JLabel fechaAltaTitle;
    private javax.swing.JLabel fechaAltaValor;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelInputs;
    private javax.swing.JList<String> miJList;
    private javax.swing.JScrollPane miScroll;
    private javax.swing.JTextField nombreTextField;
    private javax.swing.JLabel nombreTitle2;
    private javax.swing.JLabel nombreValor;
    private javax.swing.JTextField numTexfield;
    private javax.swing.JLabel numeroTitle2;
    private javax.swing.JLabel numeroValor;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelShowDatos;
    private javax.swing.JTextField plusTextField;
    private javax.swing.JLabel plusTitle;
    private javax.swing.JRadioButton programButon;
    private javax.swing.JTextField sueldoMaxTextField;
    private javax.swing.JLabel sueldoMaxTitle;
    private javax.swing.JLabel sueldoMaxTitle2;
    private javax.swing.JLabel sueldoMaxValor;
    private javax.swing.JTextField sueldoTextField;
    private javax.swing.JLabel sueldoTitle2;
    private javax.swing.JLabel sueldoValor;
    private javax.swing.JLabel tipoTitle;
    // End of variables declaration
}